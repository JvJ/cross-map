;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{}, :name cross-map.util, :imports nil, :requires nil, :uses nil, :defs {dissoc-in {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 43, :column 7, :end-line 43, :end-column 16, :arglists (quote ([m [k & ks :as keys]])), :doc "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n\n  Source code copied from clojure.core.incubator, since that library is\n  clj-specific, and this should be cross-platform."}, :name cross-map.util/dissoc-in, :variadic false, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 16, :method-params ([m p__20198]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m [k & ks :as keys]])), :doc "Dissociates an entry from a nested associative structure returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new structure.\n\n  Source code copied from clojure.core.incubator, since that library is\n  clj-specific, and this should be cross-platform."}, assoc-in! {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 61, :column 7, :end-line 61, :end-column 16, :arglists (quote ([m [k & ks] v])), :doc "Like assoc-in, but works only on transient maps."}, :name cross-map.util/assoc-in!, :variadic false, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 16, :method-params ([m p__20201 v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m [k & ks] v])), :doc "Like assoc-in, but works only on transient maps."}, dissoc-in! {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 88, :column 7, :end-line 88, :end-column 17, :arglists (quote ([m [k & ks :as keys]])), :doc "Like dissoc-in, but works only on transient maps."}, :name cross-map.util/dissoc-in!, :variadic false, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 17, :method-params ([m p__20227]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m [k & ks :as keys]])), :doc "Like dissoc-in, but works only on transient maps."}, update-in! {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 81, :column 7, :end-line 81, :end-column 17, :arglists (quote ([m [k & ks] f & args])), :doc "Like update-in, but works only on transient maps.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(m [k & ks] f args)], :arglists ([m [k & ks] f & args]), :arglists-meta (nil)}}, :name cross-map.util/update-in!, :variadic true, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(m [k & ks] f args)], :arglists ([m [k & ks] f & args]), :arglists-meta (nil)}, :method-params [(m [k & ks] f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists ([m [k & ks] f & args]), :doc "Like update-in, but works only on transient maps."}, Err {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 14, :column 11, :end-line 14, :end-column 14, :macro true, :arglists (quote ([& body])), :doc "Create an exception in clj or cljs.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cross-map.util/Err, :variadic true, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :macro true, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Create an exception in clj or cljs."}, kvp {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 27, :column 7, :end-line 27, :end-column 10, :arglists (quote ([k v])), :doc "Utility for cross-platform key-value-pair creation."}, :name cross-map.util/kvp, :variadic false, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 10, :method-params ([k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([k v])), :doc "Utility for cross-platform key-value-pair creation."}, <| {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 9, :column 11, :end-line 9, :end-column 13, :macro true, :arglists (quote ([& body])), :doc "Composition.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cross-map.util/<|, :variadic true, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :macro true, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Composition."}, $ {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 4, :column 11, :end-line 4, :end-column 12, :macro true, :arglists (quote ([& body])), :doc "Alias for core/partial.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}}, :name cross-map.util/$, :variadic true, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(&form &env body)], :arglists ([&form &env & body]), :arglists-meta (nil)}, :method-params [(&form &env body)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 4, :macro true, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists ([&form &env & body]), :doc "Alias for core/partial."}, vmemo {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 34, :column 7, :end-line 34, :end-column 12, :arglists (quote ([f]))}, :name cross-map.util/vmemo, :variadic false, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 12, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, update! {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 68, :column 7, :end-line 68, :end-column 14, :arglists (quote ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more])), :doc "Like update, but works only on tansient maps.", :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z]), :arglists ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more]), :arglists-meta (nil nil nil nil nil)}}, :name cross-map.util/update!, :variadic true, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 6, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z]), :arglists ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more]), :arglists-meta (nil nil nil nil nil)}, :method-params ([m k f] [m k f x] [m k f x y] [m k f x y z]), :protocol-impl nil, :arglists-meta (nil nil nil nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 6, :fn-var true, :arglists ([m k f] [m k f x] [m k f x y] [m k f x y z] [m k f x y z & more]), :doc "Like update, but works only on tansient maps."}, pair? {:protocol-inline nil, :meta {:file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :line 20, :column 7, :end-line 20, :end-column 12, :arglists (quote ([v])), :doc "Utility function that determines whether a value is\n  a two-element vector."}, :name cross-map.util/pair?, :variadic false, :file "C:\\Users\\Kaylen\\git\\cross-map\\src\\cross_map\\util.cljc", :end-column 12, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Utility function that determines whether a value is\n  a two-element vector."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{cljs.core/comp cljs.core/partial}, :order [cljs.core/partial cljs.core/comp]}, :doc "Utility functions for cross-map implementation."}